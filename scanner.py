from urllib import request, response
import requests
import re
import urllib.parse as urlparse
from urllib.parse import urljoin
from bs4 import BeautifulSoup
import html5lib


class Scanner:
    def __init__(self,url,ignore_links):
        self.session= requests.Session()
        self.target_url=url
        self.target_links=[]
        self.links_to_ignore=ignore_links

    def extract_link_form(self, url):
        
        response =self.session.get(url)
        return re.findall('(?:href=")(.*?)"' ,response.content.decode(errors="ignore"))

    def crawl (self,url=None):
        if url==None:
            url=self.target_url
        href_links=self.extract_link_form(url)
        for link in href_links:
            link=urlparse.urljoin(url, link)

            if "#" in link:
                link =link.split("#")[0]

            if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
                self.target_links.append(link)
                print(link)
                self.crawl(link)# to recursively call the craw funtion to discover all path and underlying link in a website


    def extract_forms(self,url):
        response=self.session.get(url)
        parsed_html=BeautifulSoup(response.content ,'html5lib')
        return parsed_html.findAll("form")

    def submit_form(self,form,value,url):
        action=form.get("action")
        post_url=urlparse.urljoin(url,action)
        method=form.get("method")

        input_list=form.findAll("input")
        post_data={}
        for input in input_list:
            input_name=input.get("name")
            input_type=input.get("type")
            input_value=input.get("value")
            if input_type=="text":
                input_value=value
            
            post_data[input_name]=input_value
        if method=="post":
            return self.session.post(post_url,data=post_data)
        return self.session.get(post_url,params=post_data)

    def run_scanner(self):
        for link in self.target_links:
            forms=self.extract_forms(link)
            for form in forms:
                print("[+] Testing form to Check XSS: " +link)
                is_vunerable_to_XSS=self.test_xss_in_form(form,link)
                if is_vunerable_to_XSS:
                    print("\n\n[###] XSS discoved in " +link +" in the following form")
                    print(form)
                print("[+] Testing form to Check SQLi: " +link)
                is_vunerable_to_SQLI=self.scan_sql_injection_Informs(link)
                if is_vunerable_to_SQLI:
                    print("\n\n[###] SQLi discoved in " +link +" in the following form")
                    print(form)
            if "=" in link:
                print("[+] Testing link to Check XSS: " +link)
                is_vunerable_to_SQLI=self.scan_sql_injection_Inlink(link)
                if is_vunerable_to_SQLI:
                    print("[###] SQLi discoved in " +link)
                is_vunerable_to_XSS=self.test_xss_in_link(link)
                print("[+] Testing link to Check SQLi: " +link)
                if is_vunerable_to_XSS:
                    print("[###] XSS discoved in " +link)
#XSS in link
    def test_xss_in_link(self,url):
        xss_test_script="<sCript>alert('Test')</scriPt>"
        url=url.replace("=","=" + xss_test_script) # replacing and adding the payload on the URL after equal
        response=self.session.get(url)
        return xss_test_script.encode() in response.content# to check if Script is there in the webpage
#XSS in form           
    def test_xss_in_form(self,form,url):
        xss_test_script= "<sCript>alert('Test')</scriPt>"
        response= self.submit_form(form,xss_test_script,url)
        return xss_test_script.encode() in response.content# to check if Script is there in the webpage

#SQL injection related code
    def is_vulnerable(self,response):
        """A simple boolean function that determines whether a page 
        is SQL Injection vulnerable from its `response`"""
        errors = {
            # MySQL
            "you have an error in your sql syntax;",
            "warning: mysql",
            # SQL Server
            "unclosed quotation mark after the character string",
            # Oracle
            "quoted string not properly terminated",
        }
        for error in errors:
            # if you find one of these errors, return True
            if error in response.content.decode().lower():
                return True
        # no error detected
        return False


    def scan_sql_injection_Inlink(self,url):
        # test on URL
        for c in "\"'":
            # add quote/double quote character to the URL
            new_url = f"{url}{c}"
            print("[!] Trying", new_url)
            # make the HTTP request
            res = self.session.get(new_url)
            if self.is_vulnerable(res):
                # SQL Injection detected on the URL itself, 
                # no need to preceed for extracting forms and submitting them
                print("[+] SQL Injection vulnerability detected, link:", new_url)
                return

    def get_form_details(self,form):
        """
        This function extracts all possible useful information about an HTML `form`
        """
        details = {}
        # get the form action (target url)
        try:
            action = form.attrs.get("action").lower()
        except:
            action = None
        # get the form method (POST, GET, etc.)
        method = form.attrs.get("method", "get").lower()
        # get all the input details such as type and name
        inputs = []
        for input_tag in form.find_all("input"):
            input_type = input_tag.attrs.get("type", "text")
            input_name = input_tag.attrs.get("name")
            input_value = input_tag.attrs.get("value", "")
            inputs.append({"type": input_type, "name": input_name, "value": input_value})
        # put everything to the resulting dictionary
        details["action"] = action
        details["method"] = method
        details["inputs"] = inputs
        return details
        
    def scan_sql_injection_Informs(self,url):
        forms = self.extract_forms(url)
        print(f"[+] Detected {len(forms)} forms on {url}.")
        for form in forms:
            form_details = self.get_form_details(form)
            for c in "\"'":
                # the data body we want to submit
                data = {}
                for input_tag in form_details["inputs"]:
                    if input_tag["value"] or input_tag["type"] == "hidden":
                        # any input form that has some value or hidden,
                        # just use it in the form body
                        try:
                            data[input_tag["name"]] = input_tag["value"] + c
                        except:
                            pass
                    elif input_tag["type"] != "submit":
                        # all others except submit, use some junk data with special character
                        data[input_tag["name"]] = f"test{c}"
                # join the url with the action (form request URL)
                url = urljoin(url, form_details["action"])
                if form_details["method"] == "post":
                    res = self.session.post(url, data=data)
                elif form_details["method"] == "get":
                    res = self.session.get(url, params=data)
                # test whether the resulting page is vulnerable
                if self.is_vulnerable(res):
                    print("[+] SQL Injection vulnerability detected, link:", url)
                    print("[+] Form:")
                    print(form_details)
                    break 